function [FCAData] = applyFCA(data_path,save_path,SGfiltparam,nodeParam,...
                              options)
%APPLYFCA FCA method for accurate and precise force measurements.
%   FCAData = applyFCA(data_path,save_path,SGfiltparam,nodeParam,options)
%   calculates accurate and precise force curves from given AFM input data.
%   The calculation includes the compensation of drift and the
%   determination of the sensitivity factor as described in [1]. 
%
% Arguments:
%---------------------
%   data_path - Path to a .mat file containing the data-struct of the input
%               data.
%
%   These data files have to fulfil the following layout:
%
%    - Each data file contains 2N measurements in a single struct, 
%      data are usually acquired with N different amplitude values. 
%      Usually, for the first N values (1:N), the voltage amplitude               
%      setpoint was incrementally increased while the 
%      second N values (N+1:2N) are data with decreased amplitude values. 
%      
%      The data-struct has the following layout: 
%      
%      data.name : Name of measurement. Used for naming the output files.
%
%      data.Vamp : [1x2N double array], voltage amplitude setpoints (in V)   
% 
%      data.zp   : {1x2N cell}, absolute z-piezo positions for each 
%                  data curve (in m)
% 
%      data.df   : {1x2N cell}, df data (in Hz) acquired 
%                  with respect to data.zp 
%
%      data.TipParam : struct, containing the tip parameters for the 
%                  measurement: 
% 
%          .TipParam.k0      : Spring constant (in N/m)
%          .TipParam.f0      : Eigenfrequency (in Hz)
%          .TipParam.Q       : Quality factor
%          .TipParam.SzGuess : Estimate for the Sz value, for example 
%                              measured via the gamma-method [2] (in m/V)                      
%                                                  
%      These fields are the minimum requirements to perform the FCA method.
%
%    - Recommended is a consistent naming convention for the .mat-files 
%      (such as 'sample_date_tip_MeasNr_data.mat')               
%
%---------------------
%       
%   save_path - Path to the folder in which the FCA results are stored.
%               A subfolder is created with the given data.name for the
%               input data set. 
%
%---------------------
%               
%   SGfiltparam - Struct containing the parameters for the Savitzky-Golay
%                 filter [2], which is applied in the force deconvolution 
%                 using the Sader/Jarvis algorithm [3].
%                 Has to contain the following fields:
%
%   SGfiltparam.frame: frame length for SG filtering.
%                      sets the number of points for the polynomial fit
%                      (larger values correspond to stronger filtering)
%                                    
%   SGfiltparam.order: order of the fitted polynomial 
%                      (smaller values correspond to stronger filtering)
%                                    
%---------------------
%
%   nodeParam - Struct containing all parameters for the node positioning
%               on the deconvoluted force curves. These nodes are
%               utilized by the FCA method for the evaluation of force
%               curve overlap goodness. This struct contains the fields
%                 
%   nodeParam.Find : [1xk positive integer array], indicies defining the 
%                    nodes on the attractive branch of the reference force
%                    curve counted from the smallest shared force
%                    index FCAData.corrProg.Fcalc.optOvl.IminFref.
%
%   nodeParam.avgRange : Integer, representing the single side range of 
%                        force averagig from the node position. The
%                        resulting averaging environment around the node is
%                        given by 2*avgRange+1. 
%
%---------------------
%
%   options - Struct containing the options for the fminsearch function
%             set by the build-in optimset function. See the Matlab
%             documentation of optimset for further information.
%
%--------------------------------------------------------------------------
% Returns:
%---------------------
%   FCAData - Struct with the results of the FCA method. 
%             Contains the following fields:
%                 
%   FCAData.name : Name of the FCAData struct. Generated by 
%                  ['data.name' '_FCAresult'] 
%                 
%   FCAData.Vamp : [1x2N], voltage amplitude setpoints (in V). 
%                  Copy of data.Vamp.
%
%   FCAData.df   : {1x2N}, df(z) curves (in Hz). Copy of data.df.
%                         
%   FCAData.TipParam : Struct with the tip parameters. 
%                      k0, f0 and Q are copies from the data.TipParam 
%                      struct. SzResult is the sensitivity factor as 
%                      determined from the FCA method. 
%                      Fields are:
%                                    
%          .TipParam.k0 : Spring constant (in N/m)
%          .TipParam.f0 : Eigenfrequency (in Hz)
%          .TipParam.Q  : Quality factor
%          .TipParam.SzResult : Sz value resulting from the FCA method 
%                               (in m/V)                         
%                                                       
%    FCAData.zps  : {1x2N}, z-piezo positions shifted by the FCA-determined
%                   sensitivity factor and drift correction (in m).
%                            
%    FCAData.ztip : {1x2N}, zps output from the Sader-Jarvis deconvolution
%                   (arrays are shorter than FCAData.zps due to the 
%                   deconvolution)
% 
%                                
%    FCAData.Ftip : {1x2N}, force curves calculated with the Sader-Jarvis 
%                   algorithm [3] using the FCA-determined parameters 
%
%
%    FCAData.corrProg : struct, containing the variables relevant during 
%                       the correction progress. Fields are:              
%                                    
%
%    FCAData.corrProg.fminIn : struct, contains parameters inserted into 
%                              the fminsearch routine:
%                                   
%    FCAData.corrProg.fminIn.initParam : [Sz0 p1 p2 p3], Inital 
%                                        parameter array for fminsearch.
%                                                  
%    FCAData.corrProg.fminIn.driftCorr : struct containing drift correction 
%                                        parameters from poly3 fit. Further
%                                        information in the documentation
%                                        of the function findInitialParam.
%
%    FCAData.corrProg.fminIn.options   : struct, contains options for the 
%                                        fminsearch routine as set 
%                                        with optimset 
%
%    FCAData.corrProg.fminIn.nodeParam : struct, contains parameter for 
%                                        the node placement in the 
%                                        optfunction. (See documentation 
%                                        of run_FCA)
%
%    FCAData.corrProg.fminIn.SGfiltparam : struct, contains parameters for
%                                          the Savitzky-Golay filter. (See
%                                          documentation of run_FCA)         
%
%
%    FCAData.corrProg.fminOut : struct, containing the fminsearch output
%                                      
%    FCAData.corrProg.fminOut.resParam : [SzResult p1 p2 p3] Array of the
%                                        resulting parameters of 
%                                        the fminsearch optimisation
%                                                 
%    FCAData.corrProg.fminOut.fval     : double, final optimisation 
%                                        value epsRMS (in m).
%                                                                        
%    FCAData.corrProg.fminOut.exitflag : Exitflag from the fminsearch
%                                        routine. Further details in 
%                                        corresponding matlab 
%                                        documentation.
%
%    FCAData.corrProg.fminOut.output : text, fminsearch output. Further 
%                                      details in corresponding matlab 
%                                      documentation.
%
%
%    FCAData.corrProg.Fcalc          : struct, contains the output of the
%                                      optOvlForceS function for the force
%                                      calculation utlizing the optimised 
%                                      parameters in resParam.
%
%    FCAData.corrProg.Fcalc.epsRMS   : Epsilon value of the final force 
%                                      deconvolution utilizing resParam.
%                                      (Should be equal to fminOut.fval!)
%
%    FCAData.corrProg.Fcalc.optOvl   : Struct containig the output of the
%                                      function optOvlForceS for the final
%                                      fminsearch iteration based on the
%                                      parameters
%                                      FCAData.corrProg.fminOut.resParam.
%                                      More detailed information can be
%                                      found in the documentation of 
%                                      optOvlForceS.

% 
% FCA method is based on
% [1] D. Heile, R. Olbrich, M. Reichling, P. Rahe
%     "Alignment method for the accurate and precise quantification of 
%     tip-surface forces"
%
% References: 
% [2] A. Savitzky, M.J.E. Golay, Anal. Chem. 36, 1627 (1964)
%     doi: 10.1021/ac60214a047
% [3] J.E. Sader and S.P. Jarvis, Appl. Phys. Lett. 84, 1801 (2004)
%     doi: 10.1063/1.1667267
% [4] H. Söngen, R. Bechstein, A. Kühnle, 
%     J. Phys. Cond. Matter 29, 274001 (2017)
%     doi: 10.1088/1361-648X/aa6f8b
%
% Copyright (C) 2020, Daniel Heile, Reinhard Olbrich, Michael Reichling,
% Philipp Rahe
%
% This is a script under the terms of the Creative Commons Attribution 
% License (creativecommons.org/licenses/by/4.0), which permits 
% unrestricted use, distribution, and reproduction in any medium, 
% provided the original work is properly cited.
%
% version 13.08.2020, Daniel Heile (dheile@uos.de)


%% Load input data and initialise sub folder at save_path

% Load the data-struct from .mat-file at the given path
load(data_path,'data') 

% Create subfolder at the save_path direction for this evaluation
savevz = [save_path '\' data.name];
mkdir(savevz)

% Copy the .mat-file containg input data and move it to the subfolder 
% "savevz"  
copyfile(data_path,[savevz '\'])


%% Find initial parameters for fminsearch
[initParam,driftCorr] = findInitialParam(data);

%Save inital guess to the correction progress struct
corrProg.fminIn.initParam = initParam; 
corrProg.fminIn.driftCorr = driftCorr;
corrProg.fminIn.options = options;
corrProg.fminIn.nodeParam = nodeParam;
corrProg.fminIn.SGfiltParam = SGfiltparam; 


%% Initialise optimisation function for fminsearch 
optfunc = @(x) optOvlForceS(data,SGfiltparam,nodeParam,...
                            x(1),x(2),x(3),x(4));


%% Apply fminsearch to the optfunc
[resParam,fval,exitflag,output] = fminsearch(optfunc,initParam,options);

%Save the output of fminsearch to the correction progess struct
corrProg.fminOut.resParam = resParam;
corrProg.fminOut.fval = fval; 
corrProg.fminOut.exitflag = exitflag;
corrProg.fminOut.output = output;


%% Calculate the force curves with corrected parameters
[epsRMS, optOvl] = optOvlForceS(data,SGfiltparam,nodeParam,resParam(1)...
                                ,resParam(2),resParam(3),resParam(4));

corrProg.Fcalc.epsRMS=epsRMS;
corrProg.Fcalc.optOvl=optOvl;


%% Create FCAData output struct and store in file
% see supplementary material of [1] for the structure of FCAData
FCAData= struct();

FCAData.name = [data.name '_FCAresult'];
FCAData.Vamp = data.Vamp;
FCAData.df = data.df;

FCAData.TipParam = rmfield(data.TipParam,'SzGuess');
FCAData.TipParam.SzResult = resParam(1);  

for i=1:size(data.Vamp,2)
    FCAData.zps{1,i} = optOvl.curve(i).zps;
    FCAData.ztip{1,i} = optOvl.curve(i).ztip;
    FCAData.Ftip{1,i} = optOvl.curve(i).Ftip';
end

% The FCAData-struct contains additional data in the corrProg field. 
% Here are all parameters important during the correction process saved.
FCAData.corrProg = corrProg;

save([savevz '\' FCAData.name '.mat'],'FCAData');

%% Visualise Results
% Not strictly required when using the FCA method in batch processing. 
visResults(data,FCAData,savevz)

end

